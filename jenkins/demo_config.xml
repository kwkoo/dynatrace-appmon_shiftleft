<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.12.2">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.39">
    <script>node {
   def mvnHome
   stage(&apos;Preparation&apos;) { // for display purposes
      // Get some code from a GitHub repository
      git &apos;/git/SpringBootBookstoreWithProblems&apos;
      // Get the Maven tool.
      // ** NOTE: This &apos;M3&apos; Maven tool must be configured
      // **       in the global configuration.           
      mvnHome = tool &apos;M3&apos;
   }
   stage(&apos;BuildReading&apos;) {
      // Run the maven build
      env.JAVA_HOME=&quot;${tool &apos;JDK8&apos;}&quot;
      if (isUnix()) {
         sh &quot;cd ./reading;&apos;${mvnHome}/bin/mvn&apos; -Dmaven.test.failure.ignore clean package&quot;
      } else {
         bat(/&quot;${mvnHome}\bin\mvn&quot; -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage(&apos;BuildBookstore&apos;) {
      // Run the maven build
      env.JAVA_HOME=&quot;${tool &apos;JDK8&apos;}&quot;
      if (isUnix()) {
         sh &quot;cd ./bookstore;&apos;${mvnHome}/bin/mvn&apos; -Dmaven.test.failure.ignore clean package&quot;
      } else {
         bat(/&quot;${mvnHome}\bin\mvn&quot; -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage(&apos;clearStaging&apos;) {
       // we have to kill these existing processes. We learned that killing sometimes doesnt work the first time - so we try it twice :-)
       sh &quot; for pid in \$(ps -ef|grep reading|grep java|awk &apos;{print \$2}&apos;); do kill -9 \$pid; done &amp;&quot;
       sh &quot; for pid in \$(ps -ef|grep bookstore|grep java|awk &apos;{print \$2}&apos;); do kill -9 \$pid; done &amp;&quot;
       sh &quot; for pid in \$(ps -ef|grep reading|awk &apos;{print \$2}&apos;); do kill -9 \$pid; done &amp;&quot;
       sh &quot; for pid in \$(ps -ef|grep bookstore|awk &apos;{print \$2}&apos;); do kill -9 \$pid; done &amp;&quot;
   }    
   stage(&apos;deployIntoStaging&apos;) {
      // Run the maven build
      env.JAVA_HOME=&quot;${tool &apos;JDK8&apos;}&quot;
      if (isUnix()) {
         sh &quot;java -agentpath:/opt/dynatrace/agent/lib64/libdtagent.so=name=reading_group,server=dtserver -jar ./reading/target/reading-0.0.1-SNAPSHOT.jar 2&gt;&amp;1 &gt;reading.log &amp; &quot;
         sh &quot;java -agentpath:/opt/dynatrace/agent/lib64/libdtagent.so=name=bookstore_group,server=dtserver -jar ./bookstore/target/bookstore-0.0.1-SNAPSHOT.jar 2&gt;&amp;1 &gt;bookstore.log &amp;&quot;
      } else {
         bat(/&quot;${mvnHome}\bin\mvn&quot; -Dmaven.test.failure.ignore clean package/)
      }
   }
   stage(&apos;ValidateStageDeployment&apos;) {
     // Run the maven build
     env.JAVA_HOME=&quot;${tool &apos;JDK8&apos;}&quot;
     // will do a quick wget to hit the endpoints once - wait 5 seconds so that the servers can start
     sh &quot;sleep 20&quot;
     sh &quot;wget http://localhost:9090/recommended&quot;
     sh &quot;wget http://localhost:9080/to-read&quot;
   }
   stage (&apos;DynatraceWebAPITests&apos;) {
      //required to define a parameter get the value from the property and then pass from the pipeline to the job
      def appip = &quot;localhost&quot;
      echo appip
    
      build job: &apos;Dynatrace WebAPI tests&apos;, parameters: [[$class: &apos;StringParameterValue&apos;, name: &apos;appip&apos;, value: appip]]
   }
   stage(&apos;LoadTest&apos;) {
      // TODO: RUN A REAL LOAD TEST AND THEN PROMOTE TO NEXT PHASE
      env.JAVA_HOME=&quot;${tool &apos;JDK8&apos;}&quot;
   }
   stage(&apos;DeployProduction&apos;) {
      // TODO: DEPLOY BUILD INTO A &quot;PRODUCTION&quot; ENVIRONMENT
      env.JAVA_HOME=&quot;${tool &apos;JDK8&apos;}&quot;
   }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
